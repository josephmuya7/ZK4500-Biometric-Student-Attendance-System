
package automated.sas;

/**
 *
 * @author Smoker
 */

import com.zkteco.biometric.FingerprintSensorErrorCode;
import com.zkteco.biometric.FingerprintSensorEx;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JRadioButton;
import javax.swing.JTextArea;
import com.google.zxing.WriterException;
import java.awt.Image;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Locale;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Hashtable;
import javax.imageio.ImageIO;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import com.hp.hpl.jena.sparql.function.library.date;
import com.mysql.cj.jdbc.result.ResultSetMetaData;
import java.awt.Graphics;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.ByteArrayInputStream;
import java.io.FileOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import java.util.Base64;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.SecureRandom;
import java.text.ParseException;
import java.util.concurrent.atomic.AtomicLong;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.DocumentFilter;
public class Student_EnrollmentTab extends javax.swing.JFrame {

    
    /**
     * Creates new form Student_EnrollmentTab
     */
    Connection conn;
    PreparedStatement pst;
    ResultSet rs;
    String sql;
    private ImageIcon format=null;

    //the width of fingerprint image
	int fpWidth = 0;
	//the height of fingerprint image
	int fpHeight = 0;
	//for verify test
	private byte[] lastRegTemp = new byte[2048];
	//the length of lastRegTemp
	private int cbRegTemp = 0;
	//pre-register template
	private byte[][] regtemparray = new byte[3][2048];
	//Register
	
	private boolean bIdentify = true;
	//finger id
	private int iFid = 1;
	
	private int nFakeFunOn = 1;
	
	
	
	private byte[] imgbuf = null;
	private byte[] template = new byte[2048];
	private int[] templateLen = new int[1];
	
	
	private boolean mbStop = true;
	private long mhDevice = 0;
	private long mhDB = 0;
    private WorkThread workThread = null;
    
    private boolean isFingerPlaced = false; // Flag to track if a finger is placed

    
    int stud_id;
    String id="";
    String name="";
    String gender = "";
    String regno="";
    String faculty="";
    String year="";
    String semester="";
    String d="";
    String xname = null;
    byte[] imgFinger = null;
   // Path to store fingerprint images
    private static final String FINGERPRINT_IMAGE_PATH = "C:\\test\\fingerprint_images\\";
    
    public Student_EnrollmentTab() {
        initComponents();
        conn=DBConnect.connect();
        getID();
        totalstd();
        getWholeStdData();
        clearingFields();
        clearingTable();
        // Set up the JTable mouse click listener
        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jMenu1 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        std_id = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        std_name = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBoxFaculty = new javax.swing.JComboBox<>();
        Remove = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        Clear = new javax.swing.JButton();
        Viewall = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        std_regno = new javax.swing.JTextField();
        rbtmale = new javax.swing.JRadioButton();
        rbtfmale = new javax.swing.JRadioButton();
        dashboard_btn = new javax.swing.JButton();
        lblimage2 = new javax.swing.JLabel();
        add_qr_codebtn = new javax.swing.JButton();
        btnopen = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        btnClose = new javax.swing.JButton();
        lblfinger = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxYear = new javax.swing.JComboBox<>();
        Add = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jSemester = new javax.swing.JComboBox<>();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Student ID ");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 70, 30));
        jPanel1.add(std_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 110, 20));

        jLabel3.setText("Student Name");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 90, 20));
        jPanel1.add(std_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, 140, 20));

        jLabel4.setText("Gender");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 100, 20));

        jLabel5.setText("Faculty ");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 90, 30));

        jComboBoxFaculty.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Computer Science", "IT" }));
        jPanel1.add(jComboBoxFaculty, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 180, 150, 20));

        Remove.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/remove.png"))); // NOI18N
        Remove.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveActionPerformed(evt);
            }
        });
        jPanel1.add(Remove, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 320, -1, -1));

        Update.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/update.png"))); // NOI18N
        Update.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });
        jPanel1.add(Update, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 320, 110, -1));

        Clear.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/clear.png"))); // NOI18N
        Clear.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });
        jPanel1.add(Clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 320, -1, -1));

        Viewall.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/viewAll.png"))); // NOI18N
        Viewall.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        Viewall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewallActionPerformed(evt);
            }
        });
        jPanel1.add(Viewall, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 320, 110, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Student Id", "Student Name", "Student RegNo", "Gender", "Faculty", "Year", "Semester", "Added On", "Qrcode", "Fingerprint"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Byte.class, java.lang.Byte.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 370, 890, 70));

        jLabel7.setText("Total Students");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 50, -1, -1));
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 50, 130, 20));

        jDateChooser1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser1PropertyChange(evt);
            }
        });
        jPanel1.add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 80, 130, 20));

        jLabel9.setText("Date ");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 70, 90, 30));

        jLabel10.setText("Student RegNo");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 100, 20));
        jPanel1.add(std_regno, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, 140, 20));

        rbtmale.setFont(new java.awt.Font("Sitka Text", 1, 12)); // NOI18N
        rbtmale.setText("Male");
        jPanel1.add(rbtmale, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 140, -1, -1));

        rbtfmale.setFont(new java.awt.Font("Sitka Text", 1, 12)); // NOI18N
        rbtfmale.setText("Female");
        jPanel1.add(rbtfmale, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 140, -1, -1));

        dashboard_btn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        dashboard_btn.setText("Dashboard");
        dashboard_btn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        dashboard_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dashboard_btnActionPerformed(evt);
            }
        });
        jPanel1.add(dashboard_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 160, 100, 20));

        lblimage2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        lblimage2.setMaximumSize(new java.awt.Dimension(208, 212));
        lblimage2.setMinimumSize(new java.awt.Dimension(208, 212));
        lblimage2.setPreferredSize(new java.awt.Dimension(208, 212));
        jPanel1.add(lblimage2, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 110, 230, 160));

        add_qr_codebtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        add_qr_codebtn.setText("Add QrCode");
        add_qr_codebtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        add_qr_codebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_qr_codebtnActionPerformed(evt);
            }
        });
        jPanel1.add(add_qr_codebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 280, 90, -1));

        btnopen.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnopen.setText("Open");
        btnopen.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        btnopen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnopenActionPerformed(evt);
            }
        });
        jPanel1.add(btnopen, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 50, 100, -1));

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane2.setViewportView(textArea);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 450, 390, 40));

        btnClose.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnClose.setText("Close");
        btnClose.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        jPanel1.add(btnClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 100, 100, -1));

        lblfinger.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jPanel1.add(lblfinger, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, 256, 300));

        jLabel2.setText("Year");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 70, -1));

        jComboBoxYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ist", "2nd", "3rd", "4th" }));
        jPanel1.add(jComboBoxYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 210, 150, -1));

        Add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/add.png"))); // NOI18N
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });
        jPanel1.add(Add, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 323, 110, 30));

        jLabel6.setText("Semester");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 70, 20));

        jSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1st", "2nd" }));
        jPanel1.add(jSemester, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 250, 150, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 910, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * total number of students
     */
    public void totalstd() {
        try {
            
            String sql = "select COUNT(student_id) from tbl_std";
            pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()){
                jLabel8.setText(rs.getString(1));
            }
        }
        catch (Exception ex) {
            System.out.println(ex.toString());
        }
    } 
    
    /**
     * Auto Generating IDs
     */
    public void getID (){
        try {
            
            String sql = "select max(student_id) from tbl_std ";
            pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            
            if(rs.next()) //0
            {
                
                stud_id = rs.getInt(1);//0
                stud_id ++;//0+1=1
                std_id.setText(Integer.toString(stud_id));
               
            }
            
        }
        catch(Exception ex) {
            System.out.println(ex.toString());
        }
    }
    
    public void getStdData() {
        try {
            DefaultTableModel dt = (DefaultTableModel)jTable1.getModel();
            
            ResultSet rs = pst.executeQuery("select student_id as 'Student Id',student_name as 'Student Name', student_regno as 'Student RegNo', gender as 'Gender', faculty as 'Faculty', year as 'Year',semester as 'Semester', added_on as 'Added On', qrcode as 'Qrcode', fingerprint as 'Fingerprint' from tbl_std");
           
            jTable1.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));
            
        }
        catch(Exception ex ) {
            System.out.println(ex.toString());
        }
    }
            
    /**
     * Get Data Method
     */
    public void getWholeStdData() {
        try {
            DefaultTableModel dt = (DefaultTableModel)jTable1.getModel();
            String sql = "select student_id as 'Student Id', student_name as 'Student Name', student_regno as 'Student RegNo', gender as 'Gender', faculty as 'Faculty', year as 'Year', semester as 'Semester', added_on as 'Added On', qrcode as 'Qrcode' , fingerprint as 'Fingerprint' from tbl_std";
            pst =  conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
          
            jTable1.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));
            
        }
        catch(Exception ex ) {
            System.out.println(ex.toString());
        }
    }

  
    
    /**
     * Clearing the Data
     */
    public void clearingFields(){
        
        std_name.setText("");
        std_regno.setText("");
        rbtmale.setSelected(false);
        rbtfmale.setSelected(false);
        jComboBoxFaculty.setSelectedIndex(0);
        jComboBoxYear.setSelectedIndex(0);
        jSemester.setSelectedIndex(0);
        lblimage2.setIcon(null);
        lblfinger.setIcon(null);
        jDateChooser1.setDate(null);
        getID ();
    }
    
    /**
     * Clearing table
     */
    public void clearingTable(){
        try {
            /**
             * Clearing Rows from jTable1
             */
            DefaultTableModel dm = (DefaultTableModel) jTable1.getModel();
            int rowCount = dm.getRowCount();
            //Remove rows one by one from the end of the table
            for (int i = rowCount - 1; i >= 0; i--) {
                dm.removeRow(i);
            }   
        }
        catch(Exception ex) {
            System.out.println(ex.toString());
        }
    }
    
    private ImageIcon resizeImage(byte[] imageBytes, int width, int height) {
    try {
        // Convert byte array to BufferedImage
        ByteArrayInputStream bais = new ByteArrayInputStream(imageBytes);
        BufferedImage originalImage = ImageIO.read(bais);

        // Resize the image
        Image resizedImage = originalImage.getScaledInstance(width, height, Image.SCALE_SMOOTH);

        // Convert resized Image to ImageIcon
        return new ImageIcon(resizedImage);
    } catch (IOException e) {
        e.printStackTrace();
        return null;
    }
}
    
    public ImageIcon resizeImage1(String imagePath, byte[] pic){
          
        
        ImageIcon xImage=null;
        
        if(imagePath !=null)
        {
        
        xImage=new ImageIcon(imagePath);
        
        }else{
         
         xImage=new ImageIcon(pic);
        }
                
        
        Image y = xImage.getImage();
        Image y2=y.getScaledInstance(lblfinger.getHeight(), lblfinger.getWidth(),  Image.SCALE_SMOOTH);
        
        
        ImageIcon image=new ImageIcon(y);
        return image;
        
    }
    
    
    
       private void getvalue()
    {
    
        
        id = std_id.getText();
        name = std_name.getText().trim();
        regno = std_regno.getText().trim();
        std_regno.setDocument(new javax.swing.text.PlainDocument());
       if (name == null || name.isEmpty()) {
        textArea.setText("Error: Student name is required.");
        return; // Stop further processing if the name is not provided
    }

        if(rbtmale.isSelected())
        {
        gender = "Male";
        }
        else if(rbtfmale.isSelected())
        {
        gender = "Female";
        }
        faculty =  (String)jComboBoxFaculty.getSelectedItem();
        year = (String)jComboBoxYear.getSelectedItem();
        semester = (String)jSemester.getSelectedItem();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
        d = sdf.format(jDateChooser1.getDate());
   
    }
    
        
       
    private void addStudentInfo()
    
    {
         try {
        getvalue();
      
        // Check if 'name' is not null or empty
        if (name == null || name.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide a valid student name.");
            return;
        }
        
        String sql = "INSERT INTO `tbl_std` (`student_id`, `student_name`, `student_regno`, `gender`, `faculty`, `year`, `semester` , `added_on`, `qrcode`, `fingerprint`) VALUES (?,?,?,?,?,?,?,?,?,?)";                               
            
        pst = conn.prepareStatement(sql);

        pst.setString(1, id);
        pst.setString(2, name);
        pst.setString(3, regno);
        pst.setString(4, gender);
        pst.setString(5, faculty);
        pst.setString(6, year);
        pst.setString(7, semester);
        pst.setString(8, d);

        // Generate QR code image bytes
        byte[] qrCodeBytes = generateQRCodeBytes(std_regno.getText(), 208);
        // Set the QR code bytes to the prepared statement
        pst.setBytes(9, qrCodeBytes);

        pst.setBytes(10, lastRegTemp);

        // Execute the SQL query
        int a = pst.executeUpdate();

        // Additional handling code as needed
        clearingFields();
        JOptionPane.showMessageDialog(rootPane, "Student Data Added Successfully");
        getID();
        clearingTable();
        getStdData();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        e.printStackTrace();
    }
    }   
    
   
    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        
        // TODO add your handling code here:
        try {
            
            
              getvalue();
              String squpdate = "UPDATE `tbl_std` SET `student_name`=?,`student_regno`=?,`gender`=?,`faculty`=?, `year`=?,`semester`=?  WHERE student_id='"+id+"'";
              pst=conn.prepareStatement(squpdate);               
             //   pst.setString(1, id);
                pst.setString(1, name);
                pst.setString(2, regno);
                pst.setString(3, gender);
                pst.setString(4, faculty);
                 pst.setString(5, year);
                 pst.setString(6, semester);
               // pst.setString(7, d);
                 // Generate QR code image bytes
               // byte[] qrCodeBytes = generateQRCodeBytes(std_regno.getText(), 208);
               // pst.setBytes(8, qrCodeBytes);
               // pst.setBytes(9, lastRegTemp);
                
                pst.execute(); 
                JOptionPane.showMessageDialog(rootPane,"successfuly updated");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane,e);              
            } 
        
        clearingFields();
        clearingTable();
        getWholeStdData();
    }//GEN-LAST:event_UpdateActionPerformed

    private void RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveActionPerformed
        // TODO add your handling code here:
        int x=JOptionPane.showConfirmDialog(rootPane, "Do you really want to delete");
         if(x==0)
         {
         try {
                String sql="DELETE FROM `tbl_std` where student_id='"+ std_id.getText() +"'";
                pst=conn.prepareStatement(sql);
                pst.execute();
                JOptionPane.showMessageDialog(rootPane, "successfully delete");                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, e);
            }
        } 
        getWholeStdData();
    }//GEN-LAST:event_RemoveActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        // TODO add your handling code here:
        clearingFields();
    }//GEN-LAST:event_ClearActionPerformed

    private void ViewallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewallActionPerformed
        // TODO add your handling code here:
        try {
            clearingTable();
            getWholeStdData();
            
        }
        catch(Exception ex ) {
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_ViewallActionPerformed

    private void jDateChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser1PropertyChange
        // TODO add your handling code here:
        try{
            //JDateChooser Format
            SimpleDateFormat comparedate = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
            String finaldate = comparedate.format(jDateChooser1.getDate());
            
            //Current Date Formats
            DateFormat dateFormatcurrrent = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date date = new java.util.Date();
            String matchdate = dateFormatcurrrent.format(date);
            
            if(finaldate.compareTo(matchdate) > 0){
                JOptionPane.showMessageDialog(rootPane, "Your can't Add future date", "Future Date", JOptionPane.WARNING_MESSAGE);
                
            }
            else {
                
            }
        } catch(Exception ex){
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_jDateChooser1PropertyChange

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int i = jTable1.getSelectedRow();
        std_id.setText(jTable1.getModel().getValueAt(i, 0).toString().trim());
        std_name.setText(jTable1.getModel().getValueAt(i, 1).toString().trim());
        std_regno.setText(jTable1.getModel().getValueAt(i, 2).toString().trim());
        String gvalue =(jTable1.getValueAt(i, 3).toString());
        if(gvalue.equals("Male"))
        {
            rbtmale.setSelected(true);
            rbtfmale.setSelected(false);
           
        }
        else if(gvalue.equals("Female"))
        {
            rbtfmale.setSelected(true);
            rbtmale.setSelected(false);
        }
      
        jComboBoxFaculty.setSelectedItem(jTable1.getModel().getValueAt(i, 4).toString().trim());
        jComboBoxYear.setSelectedItem(jTable1.getModel().getValueAt(i, 5).toString().trim());
        jSemester.setSelectedItem(jTable1.getModel().getValueAt(i, 6).toString().trim());
       
       
        try {
            String sql="SELECT `qrcode` FROM `tbl_std` WHERE student_id='"+std_id.getText()+"'";          
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
           if(rs.next())
           {
                // Retrieve the byte array for the qrcode
            byte[] qrCodeBytes = rs.getBytes("qrcode");

            // Resize the QR code image to fit in the JLabel
            ImageIcon qrCodeIcon = resizeImage(qrCodeBytes, lblimage2.getWidth(), lblimage2.getHeight());

            // Set the resized ImageIcon to the JLabel
            lblimage2.setIcon(qrCodeIcon);
              
             
        }} catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        
        }
         
    }//GEN-LAST:event_jTable1MouseClicked

   


    private void dashboard_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dashboard_btnActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new Admin_Dashboard().setVisible(true); 
    }//GEN-LAST:event_dashboard_btnActionPerformed

   
private static byte[] generateQRCodeBytes(String qrCodeText, int size) throws WriterException {
    try {
        // Create the ByteMatrix for the QR-Code that encodes the given String
        Hashtable<EncodeHintType, ErrorCorrectionLevel> hintMap = new Hashtable<>();
        hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
        QRCodeWriter qrCodeWriter = new QRCodeWriter();
        BitMatrix byteMatrix = qrCodeWriter.encode(qrCodeText, BarcodeFormat.QR_CODE, size, size, hintMap);

        // Make the BufferedImage that holds the QRCode
        int matrixWidth = byteMatrix.getWidth();
        BufferedImage image = new BufferedImage(matrixWidth, matrixWidth, BufferedImage.TYPE_INT_RGB);
        image.createGraphics();

        Graphics2D graphics = (Graphics2D) image.getGraphics();
        graphics.setColor(Color.WHITE);
        graphics.fillRect(0, 0, matrixWidth, matrixWidth);
        // Paint the image using the ByteMatrix
        graphics.setColor(Color.BLACK);

        for (int i = 0; i < matrixWidth; i++) {
            for (int j = 0; j < matrixWidth; j++) {
                if (byteMatrix.get(i, j)) {
                    graphics.fillRect(i, j, 1, 1);
                }
            }
        }

        // Convert BufferedImage to byte array
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ImageIO.write(image, "png", baos);
        return baos.toByteArray();
    } catch (Exception e) {
        e.printStackTrace();
        return null;
    }
}
    
    private void add_qr_codebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_qr_codebtnActionPerformed
        // TODO add your handling code here:
    String qrCodeText = std_regno.getText();
    int size = 208;

    try {
        // Generate QR code image bytes
        byte[] qrCodeBytes = generateQRCodeBytes(qrCodeText, size);
        // Set the ImageIcon to the JLabel
        ImageIcon qrCodeIcon = new ImageIcon(qrCodeBytes);
        lblimage2.setIcon(qrCodeIcon);

        System.out.println("DONE");
    }catch (WriterException ex) {
        Logger.getLogger(Student_EnrollmentTab.class.getName()).log(Level.SEVERE, null, ex);
    }
        
    }//GEN-LAST:event_add_qr_codebtnActionPerformed

    

    private void btnopenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnopenActionPerformed
      // TODO Auto-generated method stub
				if (0 != mhDevice)
				{
					//already inited
					textArea.setText("Please close device first!");
					return;
				}
				int ret = FingerprintSensorErrorCode.ZKFP_ERR_OK;
				//Initialize
				cbRegTemp = 0;
				
				bIdentify = false;
				iFid = 1;
				
				if (FingerprintSensorErrorCode.ZKFP_ERR_OK != FingerprintSensorEx.Init())
				{
					textArea.setText("Init failed!");
					return;
				}
				ret = FingerprintSensorEx.GetDeviceCount();
				if (ret < 0)
				{
					textArea.setText("No devices connected!");
					FreeSensor();
                                        
					return;
				}
				if (0 == (mhDevice = FingerprintSensorEx.OpenDevice(0)))
				{
					textArea.setText("Open device fail, ret = " + ret + "!");
					FreeSensor();
					return;
				}
				if (0 == (mhDB = FingerprintSensorEx.DBInit()))
				{
					textArea.setText("Init DB fail, ret = " + ret + "!");
					FreeSensor();
					return;
				}
				
				
				//set fakefun off
				
				//FingerprintSensorEx.SetParameter(mhDevice, 2002, changeByte(nFakeFunOn), 4);
							
				byte[] paramValue = new byte[4];
				int[] size = new int[1];
				//GetFakeOn
				//size[0] = 4;
				//FingerprintSensorEx.GetParameters(mhDevice, 2002, paramValue, size);
				//nFakeFunOn = byteArrayToInt(paramValue);
				
				size[0] = 4;
				FingerprintSensorEx.GetParameters(mhDevice, 1, paramValue, size);
				fpWidth = byteArrayToInt(paramValue);
				size[0] = 4;
				FingerprintSensorEx.GetParameters(mhDevice, 2, paramValue, size);
				fpHeight = byteArrayToInt(paramValue);
				//width = fingerprintSensor.getImageWidth();
				//height = fingerprintSensor.getImageHeight();
				imgbuf = new byte[fpWidth*fpHeight];
				lblfinger.resize(fpWidth, fpHeight);
				mbStop = false;
				workThread = new WorkThread();
			        workThread.start();// 绾跨▼鍚姩
                            
                                
                             
	                    JOptionPane.showMessageDialog(null, "Biometric Device opened Successfully!");
       
    }//GEN-LAST:event_btnopenActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
       // TODO add your handling code here:
    FreeSensor();
    isFingerPlaced = false; // Reset the flag when closing the sensor
    JOptionPane.showMessageDialog(null, "Biometric Device closed Successfully!");
    }//GEN-LAST:event_btnCloseActionPerformed

    private void regImg()
    {
        if(0 == mhDB)
				{
					textArea.setText("Please open device first!");
				}
				String path = FINGERPRINT_IMAGE_PATH + "fingerprint_" + regno + ".bmp";
				byte[] fpTemplate = new byte[2048];
				int[] sizeFPTemp = new int[1];
				sizeFPTemp[0] = 2048;
				int ret = FingerprintSensorEx.ExtractFromImage( mhDB, path, 500, fpTemplate, sizeFPTemp);
				if (0 == ret)
				{
					ret = FingerprintSensorEx.DBAdd( mhDB, iFid, fpTemplate);
					if (0 == ret)
					{
						//String base64 = fingerprintSensor.BlobToBase64(fpTemplate, sizeFPTemp[0]);		
						iFid++;
                    	cbRegTemp = sizeFPTemp[0];
                        System.arraycopy(fpTemplate, 0, lastRegTemp, 0, cbRegTemp);
                        //Base64 Template
                        //String strBase64 = Base64.encodeToString(regTemp, 0, ret, Base64.NO_WRAP);
                        textArea.setText("enroll succ");
					}
					else
					{
						textArea.setText("DBAdd fail, ret=" + ret);
					}
				}
				else
				{
					textArea.setText("ExtractFromImage fail, ret=" + ret);
				}
    }
    
    
    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        // TODO add your handling code here:
         addStudentInfo();   
    }//GEN-LAST:event_AddActionPerformed

   
    
    public void windowClosing(WindowEvent e) {
                // TODO Auto-generated method stub
            	FreeSensor();
            }
    
    private void FreeSensor()
	{
		mbStop = true;
		try {		//wait for thread stopping
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (0 != mhDB)
		{
			FingerprintSensorEx.DBFree(mhDB);
			mhDB = 0;
		}
		if (0 != mhDevice)
		{
			FingerprintSensorEx.CloseDevice(mhDevice);
			mhDevice = 0;
		}
		FingerprintSensorEx.Terminate();
	}
	
   

    
	public static void writeBitmap(byte[] imageBuf, int nWidth, int nHeight,
			String path) throws IOException {
		java.io.FileOutputStream fos = new java.io.FileOutputStream(path);
		java.io.DataOutputStream dos = new java.io.DataOutputStream(fos);

		int w = (((nWidth+3)/4)*4);
		int bfType = 0x424d; 
		int bfSize = 54 + 1024 + w * nHeight;
		int bfReserved1 = 0;
		int bfReserved2 = 0;
		int bfOffBits = 54 + 1024;

		dos.writeShort(bfType); 
		dos.write(changeByte(bfSize), 0, 4); 
		dos.write(changeByte(bfReserved1), 0, 2);
		dos.write(changeByte(bfReserved2), 0, 2);
		dos.write(changeByte(bfOffBits), 0, 4);

		int biSize = 40;
		int biWidth = nWidth;
		int biHeight = nHeight;
		int biPlanes = 1; 
		int biBitcount = 8;
		int biCompression = 0;
		int biSizeImage = w * nHeight;
		int biXPelsPerMeter = 0;
		int biYPelsPerMeter = 0;
		int biClrUsed = 0;
		int biClrImportant = 0;

		dos.write(changeByte(biSize), 0, 4);
		dos.write(changeByte(biWidth), 0, 4);
		dos.write(changeByte(biHeight), 0, 4);
		dos.write(changeByte(biPlanes), 0, 2);
		dos.write(changeByte(biBitcount), 0, 2);
		dos.write(changeByte(biCompression), 0, 4);
		dos.write(changeByte(biSizeImage), 0, 4);
		dos.write(changeByte(biXPelsPerMeter), 0, 4);
		dos.write(changeByte(biYPelsPerMeter), 0, 4);
		dos.write(changeByte(biClrUsed), 0, 4);
		dos.write(changeByte(biClrImportant), 0, 4);

		for (int i = 0; i < 256; i++) {
			dos.writeByte(i);
			dos.writeByte(i);
			dos.writeByte(i);
			dos.writeByte(0);
		}

		byte[] filter = null;
		if (w > nWidth)
		{
			filter = new byte[w-nWidth];
		}
		
		for(int i=0;i<nHeight;i++)
		{
			dos.write(imageBuf, (nHeight-1-i)*nWidth, nWidth);
			if (w > nWidth)
				dos.write(filter, 0, w-nWidth);
		}
		dos.flush();
		dos.close();
		fos.close();
	}

	public static byte[] changeByte(int data) {
		return intToByteArray(data);
	}
	
	public static byte[] intToByteArray (final int number) {
		byte[] abyte = new byte[4];  
	    
	    abyte[0] = (byte) (0xff & number);  
	    
	    abyte[1] = (byte) ((0xff00 & number) >> 8);  
	    abyte[2] = (byte) ((0xff0000 & number) >> 16);  
	    abyte[3] = (byte) ((0xff000000 & number) >> 24);  
	    return abyte; 
	}	 
		 
		public static int byteArrayToInt(byte[] bytes) {
			int number = bytes[0] & 0xFF;  
		    
		    number |= ((bytes[1] << 8) & 0xFF00);  
		    number |= ((bytes[2] << 16) & 0xFF0000);  
		    number |= ((bytes[3] << 24) & 0xFF000000);  
		    return number;  
		 }
                
private class WorkThread extends Thread {
    
    
    @Override
    public void run() {
        super.run();
        int ret = 0;
        while (!mbStop) {
            templateLen[0] = 2048;
            if (0 == (ret = FingerprintSensorEx.AcquireFingerprint(mhDevice, imgbuf, template, templateLen))) {
                if (nFakeFunOn == 1) {
                    byte[] paramValue = new byte[4];
                    int[] size = new int[1];
                    size[0] = 4;
                    int nFakeStatus = 0;
                    // GetFakeStatus
                    ret = FingerprintSensorEx.GetParameters(mhDevice, 2004, paramValue, size);
                    nFakeStatus = byteArrayToInt(paramValue);
                    System.out.println("ret = " + ret + ",nFakeStatus=" + nFakeStatus);
                    if (0 == ret && (byte) (nFakeStatus & 31) != 31) {
                        textArea.setText("Is a fake-finger?");
                        return;
                    }
                }
                try {
                    OnCaptureOK(imgbuf);
                } catch (WriterException ex) {
                    Logger.getLogger(Student_EnrollmentTab.class.getName()).log(Level.SEVERE, null, ex);
                }
                

                String strBase64 = FingerprintSensorEx.BlobToBase64(template, templateLen[0]);
                System.out.println("strBase64=" + strBase64);
                
                
            }
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
    private void runOnUiThread(Runnable runnable) {
        // TODO Auto-generated method stub
    }
    }

 
private void OnCaptureOK(byte[] imgbuf) throws WriterException {
    try {
        // Save the captured fingerprint image with a unique filename based on individual's ID or name
        String fingerprintImagePath = FINGERPRINT_IMAGE_PATH + "fingerprint_" + regno + "_" + System.currentTimeMillis() + ".bmp";
        writeBitmap(imgbuf, fpWidth, fpHeight, fingerprintImagePath);

        // Get student information
        getvalue();

        // Extract and save the fingerprint template with additional information (e.g., ID, name) in the database
        extractAndSaveFingerprintTemplate(regno, imgbuf);

        // Display the captured fingerprint image on the GUI if needed
        lblfinger.setIcon(new ImageIcon(ImageIO.read(new File(fingerprintImagePath))));
    } catch (IOException e) {
        e.printStackTrace();
    }
}


private void extractAndSaveFingerprintTemplate(String regno, byte[] imgbuf) throws WriterException {
    // Extract the fingerprint template from the captured image
    byte[] template = new byte[2048];
    int[] sizeCapturedTemplate = new int[1];
    sizeCapturedTemplate[0] = 2048;

    // Extract fingerprint template from the captured image
    int ret = FingerprintSensorEx.ExtractFromImage(mhDB, byteArrayToFilePath(imgbuf), 500, template, sizeCapturedTemplate);
    if (ret == 0) {
       if (name == null || name.isEmpty()) {
        textArea.setText("Error: Student name is required.");
        return;
    }

    // Save the fingerprint template along with additional information to the database
    saveFingerprintTemplateToDatabase(regno, name, template);
    } else {
        textArea.setText("ExtractFromImage fail, ret=" + ret);
    }
}

// Convert byte array to a temporary image file and return the file path
private String byteArrayToFilePath(byte[] imgbuf) {
    try {
        // Create a temporary BMP file
        String filePath = "temp_fingerprint.bmp";
        writeBitmap(imgbuf, fpWidth, fpHeight, filePath);

        return filePath;
    } catch (IOException e) {
        e.printStackTrace();
        return null;
    }
}



private void saveFingerprintTemplateToDatabase(String regno, String name, byte[] template) throws WriterException {
    try {
        getvalue();
        
        // Save the fingerprint template along with additional information to the database
        String sql = "INSERT INTO `tbl_std` (`student_id`, `student_name`, `student_regno`, `gender`, `faculty`, `year`, `semester` , `added_on`, `qrcode`, `fingerprint`) VALUES (?,?,?,?,?,?,?,?,?,?)";
        pst = conn.prepareStatement(sql);

        // Assuming 'id' is a field in your class and has been assigned a value elsewhere
        pst.setString(1, id);
        pst.setString(2, name);
        pst.setString(3, regno);
        pst.setString(4, gender);
        pst.setString(5, faculty);
        pst.setString(6, year);
         pst.setString(7, semester);
        
        
        pst.setString(8, d);  // Assuming 'd' is a field in your class and has been assigned a value elsewhere

        // Generate QR code image bytes
        byte[] qrCodeBytes = generateQRCodeBytes(regno, 208);
        // Set the QR code bytes to the prepared statement
        pst.setBytes(9, qrCodeBytes);
        
        pst.setBytes(10, template);

        // Execute the SQL query
        int result = pst.executeUpdate();
        if (result > 0) {
            textArea.setText("Fingerprint template saved successfully for " + regno);
        } else {
            textArea.setText("Failed to save fingerprint template for " + regno);
        }
         // Additional handling code as needed
        clearingFields();
        JOptionPane.showMessageDialog(rootPane, "Student Data Added Successfully");
        getID();
        clearingTable();
        getStdData();
    } catch (SQLException e) {
        textArea.setText("Error saving fingerprint template: " + e.getMessage());
        e.printStackTrace();
    }
}






   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])  {
         

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Student_EnrollmentTab().setVisible(true);
            }
        });
    }
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton Clear;
    private javax.swing.JButton Remove;
    private javax.swing.JButton Update;
    private javax.swing.JButton Viewall;
    private javax.swing.JButton add_qr_codebtn;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnopen;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton dashboard_btn;
    private javax.swing.JComboBox<String> jComboBoxFaculty;
    private javax.swing.JComboBox<String> jComboBoxYear;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> jSemester;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton lblfinger;
    private javax.swing.JLabel lblimage2;
    private javax.swing.JRadioButton rbtfmale;
    private javax.swing.JRadioButton rbtmale;
    private javax.swing.JLabel std_id;
    private javax.swing.JTextField std_name;
    private javax.swing.JTextField std_regno;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
