
package automated.sas;

/**
 *
 * @author Smoker
 */

import com.google.zxing.WriterException;
import java.awt.Color;
import java.awt.Image;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Connection;
import javax.swing.ImageIcon;
import javax.swing.UIManager;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import com.zkteco.biometric.FingerprintSensorErrorCode;
import com.zkteco.biometric.FingerprintSensorEx;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;

public class Lecturer_Enrollment extends javax.swing.JFrame {

    /**
     * Creates new form Lecturer_Enrollment
     */
    
    Connection conn;
    PreparedStatement pst;
    ResultSet rs;
    String sql;
    int tch_id;
    String id="";
    String teacherName="";
    String teacherFaculty="";
    String teacherUnit="";
    String selectedUnit = "";
    String d="";
     private ImageIcon format=null;

    //the width of fingerprint image
	int fpWidth = 0;
	//the height of fingerprint image
	int fpHeight = 0;
	//for verify test
	private byte[] lastRegTemp = new byte[2048];
	//the length of lastRegTemp
	private int cbRegTemp = 0;
	//pre-register template
	private byte[][] regtemparray = new byte[3][2048];
	//Register
	
	private boolean bIdentify = true;
	//finger id
	private int iFid = 1;
	
	private int nFakeFunOn = 1;
	
	
	
	private byte[] imgbuf = null;
	private byte[] template = new byte[2048];
	private int[] templateLen = new int[1];
	
	
	private boolean mbStop = true;
	private long mhDevice = 0;
	private long mhDB = 0;
    private WorkThread workThread = null;
    
    private boolean isFingerPlaced = false; // Flag to track if a finger is placed
 String xname = null;
    byte[] imgFinger = null;
   // Path to store fingerprint images
    private static final String FINGERPRINT_IMAGE_PATH = "C:\\lecturer\\fingerprint_images\\";
  
    public Lecturer_Enrollment() {
        initComponents();
        conn=DBConnect.connect();
        getID();
        getTeacherData();
        getWholeTeacherData();
        clearingFields();
        clearingTable();
        // Set up the JTable mouse click listener
        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
          jFaculty.addActionListener(this::jFacultyActionPerformed);
          jComboYear.addActionListener(this::jComboYearActionPerformed);
          jComboSemester.addActionListener(this::jComboSemesterActionPerformed);
          
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        t_id = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tch_name = new javax.swing.JTextField();
        add_btn = new javax.swing.JButton();
        remove_btn = new javax.swing.JButton();
        update_btn = new javax.swing.JButton();
        clear_btn = new javax.swing.JButton();
        viewall_btn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jFaculty = new javax.swing.JComboBox<>();
        dashboard_btn = new javax.swing.JButton();
        lblfinger = new javax.swing.JButton();
        btnopen = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboYear = new javax.swing.JComboBox<>();
        jComboSemester = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jUnitComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setText("Teacher ID");

        jLabel1.setText("Lecturer Name");

        jLabel3.setText("Date");

        add_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/add.png"))); // NOI18N
        add_btn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        add_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_btnActionPerformed(evt);
            }
        });

        remove_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/remove.png"))); // NOI18N
        remove_btn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        remove_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove_btnActionPerformed(evt);
            }
        });

        update_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/update.png"))); // NOI18N
        update_btn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        update_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_btnActionPerformed(evt);
            }
        });

        clear_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/clear.png"))); // NOI18N
        clear_btn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        clear_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_btnActionPerformed(evt);
            }
        });

        viewall_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/viewAll.png"))); // NOI18N
        viewall_btn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        viewall_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewall_btnActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Teacher Id", "Teacher Name", "Faculty", "Teacher Unit", "Added On", "Fingerprint"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jDateChooser1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser1PropertyChange(evt);
            }
        });

        jLabel7.setText("Faculty");

        jFaculty.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jFaculty.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Computer Science", "IT" }));
        jFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFacultyActionPerformed(evt);
            }
        });

        dashboard_btn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        dashboard_btn.setText("Dashboard");
        dashboard_btn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        dashboard_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dashboard_btnActionPerformed(evt);
            }
        });

        lblfinger.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        btnopen.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnopen.setText("Open");
        btnopen.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        btnopen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnopenActionPerformed(evt);
            }
        });

        btnClose.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnClose.setText("Close");
        btnClose.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane2.setViewportView(textArea);

        jLabel2.setText("Year");

        jLabel4.setText("Semester");

        jComboYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboYearActionPerformed(evt);
            }
        });

        jComboSemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboSemesterActionPerformed(evt);
            }
        });

        jLabel5.setText("Lecturer Unit(s)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 889, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(add_btn)
                                .addGap(50, 50, 50)
                                .addComponent(remove_btn)
                                .addGap(57, 57, 57)
                                .addComponent(update_btn)
                                .addGap(67, 67, 67)
                                .addComponent(clear_btn)
                                .addGap(54, 54, 54)
                                .addComponent(viewall_btn))
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(30, 30, 30)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jComboYear, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jFaculty, 0, 139, Short.MAX_VALUE)
                                            .addComponent(tch_name)
                                            .addComponent(jUnitComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jComboSemester, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(t_id, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(379, 379, 379)
                                        .addComponent(lblfinger, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnopen, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dashboard_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(81, 81, 81)
                        .addComponent(btnopen)
                        .addGap(86, 86, 86)
                        .addComponent(btnClose)
                        .addGap(83, 83, 83)
                        .addComponent(dashboard_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t_id, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(tch_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jFaculty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(jUnitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(jComboYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(44, 44, 44)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)))
                            .addComponent(lblfinger, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(update_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clear_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(viewall_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(add_btn)
                            .addComponent(remove_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 15, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void getID (){
        try {
            
            String sql = "select max(teacher_id) from tbl_teacher ";
            pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            
            if(rs.next()) //0
            {
                
                tch_id = rs.getInt(1);//0
                tch_id ++;//0+1=1
                t_id.setText(Integer.toString(tch_id));
               
            }
            
        }
        catch(Exception ex) {
            System.out.println(ex.toString());
        }
    }
    
    /**
     * Teacher's with true status 
     */
    public void getTeacherData() {
        try {
            DefaultTableModel dt = (DefaultTableModel)jTable1.getModel();
            String sql= "select teacher_id as 'Teacher Id', teacher_name as 'Teacher Name', teacher_faculty as 'Faculty' , teacher_unit as 'Teacher Unit', added_on as 'Added On', fingerprint as 'Fingerprint'  from tbl_teacher";
            pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
          
            jTable1.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));
            
                    
            
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }

    /**
     * Teacher Data
     */
    public void getWholeTeacherData() {
        try {
            DefaultTableModel dt = (DefaultTableModel)jTable1.getModel();
            
            String sql="select teacher_id as 'Teacher Id', teacher_name as 'Teacher Name', teacher_faculty as 'Faculty', teacher_unit as 'Teacher Unit', added_on as 'Added On', fingerprint as 'Fingerprint' from tbl_teacher";
            pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
          
            jTable1.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));
            
                    
            
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }
   
    /**
     * Clearing Rows from jTable1
     */
    public void clearingTable(){
        try {
            /**
             * Clearing Rows from jTable1
             */
            DefaultTableModel dm = (DefaultTableModel) jTable1.getModel();
            int rowCount = dm.getRowCount();
            //Remove rows one by one from the end of the table
            for (int i = rowCount - 1; i >= 0; i--) {
                dm.removeRow(i);
            }   
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }
    
    /**
    * Clearing the Text fields
    */
    public void clearingFields(){
        
        tch_name.setText("");
        jFaculty.setSelectedIndex(0);
        jUnitComboBox.setSelectedIndex(0);
        jComboYear.setSelectedIndex(0);
        jComboSemester.setSelectedIndex(0);
        jDateChooser1.setCalendar(null);
        lblfinger.setIcon(null);
        
        getID();
    }
    
    
    private void clear_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_btnActionPerformed
        // TODO add your handling code here:
        clearingFields();
    }//GEN-LAST:event_clear_btnActionPerformed

    private ImageIcon resizeImage(byte[] imageBytes, int width, int height) {
    try {
        // Convert byte array to BufferedImage
        ByteArrayInputStream bais = new ByteArrayInputStream(imageBytes);
        BufferedImage originalImage = ImageIO.read(bais);

        // Resize the image
        Image resizedImage = originalImage.getScaledInstance(width, height, Image.SCALE_SMOOTH);

        // Convert resized Image to ImageIcon
        return new ImageIcon(resizedImage);
    } catch (IOException e) {
        e.printStackTrace();
        return null;
    }
}
    
    public ImageIcon resizeImage1(String imagePath, byte[] pic){
          
        
        ImageIcon xImage=null;
        
        if(imagePath !=null)
        {
        
        xImage=new ImageIcon(imagePath);
        
        }else{
         
         xImage=new ImageIcon(pic);
        }
                
        
        Image y = xImage.getImage();
        Image y2=y.getScaledInstance(lblfinger.getHeight(), lblfinger.getWidth(),  Image.SCALE_SMOOTH);
        
        
        ImageIcon image=new ImageIcon(y);
        return image;
        
    }
    
    
    private void getvalue()
    {
    
        id = t_id.getText();
        teacherName = tch_name.getText().trim();
        teacherFaculty =  (String)jFaculty.getSelectedItem();
        selectedUnit = (String) jUnitComboBox.getSelectedItem(); // Get the selected unit
         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
        d = sdf.format(jDateChooser1.getDate());
       
    }
         
    private void addLecturerInfo()
    {
        try {
        getvalue();
         // Check if 'name' is not null or empty
        if (teacherName == null || teacherName.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide a valid student name.");
            return;
        }
        
        
       
        // Save the fingerprint template along with additional information to the database
        String sql = "INSERT INTO `tbl_teacher` (`teacher_id`, `teacher_name`, `teacher_faculty`, `teacher_unit`, `added_on`, `fingerprint`) VALUES (?,?,?,?,?,?)";
        pst = conn.prepareStatement(sql);

                pst.setString(1, id);                
                pst.setString(2, teacherName);
                pst.setString(3, teacherFaculty);
                pst.setString(4, selectedUnit);
                pst.setString(5, d);
                pst.setBytes(6, template);

        // Execute the SQL query
        int result = pst.executeUpdate();
        if (result > 0) {
            textArea.setText("Fingerprint template saved successfully for " + teacherName);
        } else {
            textArea.setText("Failed to save fingerprint template for " + teacherName);
        }
         // Additional handling code as needed
        clearingFields();
        JOptionPane.showMessageDialog(rootPane, "Lecturer Data Added Successfully");
        getID();
        clearingTable();
        getTeacherData();
    } catch (SQLException e) {
        textArea.setText("Error saving fingerprint template: " + e.getMessage());
        e.printStackTrace();
    }
        
    }
    
    private void add_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_btnActionPerformed
       
       
       addLecturerInfo();
    }//GEN-LAST:event_add_btnActionPerformed

    private void remove_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_btnActionPerformed
        // TODO add your handling code here:
        try {
           String sql ="delete from tbl_teacher where teacher_id=? ";
                pst=conn.prepareStatement(sql);
                pst.setString(1, t_id.getText());
                pst.execute();
                clearingFields();
            
            
            JOptionPane.showMessageDialog(rootPane, "Teacher is Removed");
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
        clearingTable();
        getWholeTeacherData();
    }//GEN-LAST:event_remove_btnActionPerformed

    private void update_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_btnActionPerformed
        // TODO add your handling code here:
        
         try {
             
             getvalue();
             
            String squpdate = "UPDATE `tbl_std` SET `teacher_name`=?,`teacher_faculty`=?,`teacher_unit`=?  WHERE teacher_id='"+t_id.getText()+"'";
            PreparedStatement pst = conn.prepareStatement(squpdate);
             //   pst.setString(1, id);
                pst.setString(1, teacherName);
                pst.setString(2, teacherFaculty);
                pst.setString(2, selectedUnit);
           
            pst.execute();
            
            JOptionPane.showMessageDialog(rootPane, "Lecturer information is Updated");
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
        clearingFields();
        clearingTable();
        getWholeTeacherData();
    }//GEN-LAST:event_update_btnActionPerformed

    private void viewall_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewall_btnActionPerformed
        // TODO add your handling code here:
         clearingTable();
        getWholeTeacherData();
    }//GEN-LAST:event_viewall_btnActionPerformed

    private void jDateChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser1PropertyChange
        // TODO add your handling code here:
        try{
            //JDateChooser Format
            SimpleDateFormat comparedate = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
            String finaldate = comparedate.format(jDateChooser1.getDate());
            
            //Current Date Formats
            DateFormat dateFormatcurrrent = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date date = new java.util.Date();
            String matchdate = dateFormatcurrrent.format(date);
            
            if(finaldate.compareTo(matchdate) > 0){
                JOptionPane.showMessageDialog(rootPane, "Your can't Add future date", "Future Date", JOptionPane.WARNING_MESSAGE);
                
            }
            else {
                
            }
        } catch(Exception ex){
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_jDateChooser1PropertyChange

    private void dashboard_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dashboard_btnActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new Admin_Dashboard().setVisible(true); 
    }//GEN-LAST:event_dashboard_btnActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int i = jTable1.getSelectedRow();
        t_id.setText(jTable1.getModel().getValueAt(i, 0).toString().trim());
        tch_name.setText(jTable1.getModel().getValueAt(i, 1).toString().trim());
        jFaculty.setSelectedItem(jTable1.getModel().getValueAt(i, 2).toString().trim());     
        jUnitComboBox.setSelectedItem(jTable1.getModel().getValueAt(i, 3).toString().trim());     
       
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnopenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnopenActionPerformed
        // TODO Auto-generated method stub
        if (0 != mhDevice)
        {
            //already inited
            textArea.setText("Please close device first!");
            return;
        }
        int ret = FingerprintSensorErrorCode.ZKFP_ERR_OK;
        //Initialize
        cbRegTemp = 0;

        bIdentify = false;
        iFid = 1;

        if (FingerprintSensorErrorCode.ZKFP_ERR_OK != FingerprintSensorEx.Init())
        {
            textArea.setText("Init failed!");
            return;
        }
        ret = FingerprintSensorEx.GetDeviceCount();
        if (ret < 0)
        {
            textArea.setText("No devices connected!");
            FreeSensor();

            return;
        }
        if (0 == (mhDevice = FingerprintSensorEx.OpenDevice(0)))
        {
            textArea.setText("Open device fail, ret = " + ret + "!");
            FreeSensor();
            return;
        }
        if (0 == (mhDB = FingerprintSensorEx.DBInit()))
        {
            textArea.setText("Init DB fail, ret = " + ret + "!");
            FreeSensor();
            return;
        }

        //set fakefun off

        //FingerprintSensorEx.SetParameter(mhDevice, 2002, changeByte(nFakeFunOn), 4);

        byte[] paramValue = new byte[4];
        int[] size = new int[1];
        //GetFakeOn
        //size[0] = 4;
        //FingerprintSensorEx.GetParameters(mhDevice, 2002, paramValue, size);
        //nFakeFunOn = byteArrayToInt(paramValue);

        size[0] = 4;
        FingerprintSensorEx.GetParameters(mhDevice, 1, paramValue, size);
        fpWidth = byteArrayToInt(paramValue);
        size[0] = 4;
        FingerprintSensorEx.GetParameters(mhDevice, 2, paramValue, size);
        fpHeight = byteArrayToInt(paramValue);
        //width = fingerprintSensor.getImageWidth();
        //height = fingerprintSensor.getImageHeight();
        imgbuf = new byte[fpWidth*fpHeight];
        lblfinger.resize(fpWidth, fpHeight);
        mbStop = false;
        workThread = new WorkThread();
        workThread.start();// 绾跨▼鍚姩

       JOptionPane.showMessageDialog(null, "Biometric Device opened Successfully!");

    }//GEN-LAST:event_btnopenActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        FreeSensor();
        isFingerPlaced = false; // Reset the flag when closing the sensor
        JOptionPane.showMessageDialog(null, "Biometric Device closed Successfully!");
    }//GEN-LAST:event_btnCloseActionPerformed

    private void jFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFacultyActionPerformed
        // TODO add your handling code here:
         String selectedCourse = (String) jFaculty.getSelectedItem();
    if (selectedCourse != null) {
        // Clear existing items in year and semester JComboBoxes
        jComboYear.removeAllItems();
        jComboSemester.removeAllItems();

        // Query the database to fetch year and semester units for the selected course
        try {
            String sql = "SELECT DISTINCT year, semester FROM units WHERE course = ?";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setString(1, selectedCourse);
            ResultSet rs = pst.executeQuery();

            // Populate year and semester JComboBoxes with the retrieved data
            while (rs.next()) {
                String year = rs.getString("year");
                String semester = rs.getString("semester");
                jComboYear.addItem(year);
                jComboSemester.addItem(semester);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to fetch year and semester units.");
        }
    }
    }//GEN-LAST:event_jFacultyActionPerformed

   
    private void jComboYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboYearActionPerformed
        // TODO add your handling code here:
        updateUnitList();
    }//GEN-LAST:event_jComboYearActionPerformed

    private void jComboSemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboSemesterActionPerformed
        // TODO add your handling code here:
        updateUnitList();
    }//GEN-LAST:event_jComboSemesterActionPerformed

   private void updateUnitList() {
    String selectedCourse = (String) jFaculty.getSelectedItem();
    String selectedYear = (String) jComboYear.getSelectedItem();
    String selectedSemester = (String) jComboSemester.getSelectedItem();

    if (selectedCourse != null && selectedYear != null && selectedSemester != null) {
        jUnitComboBox.removeAllItems(); // Clear existing items


        // Query the database to fetch units for the selected course, year, and semester
        try {
            String sql = "SELECT unit FROM units WHERE course = ? AND year = ? AND semester = ?";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setString(1, selectedCourse);
            pst.setString(2, selectedYear);
            pst.setString(3, selectedSemester);
            ResultSet rs = pst.executeQuery();

            // Populate unit list with the retrieved data
            while (rs.next()) {
                String unit = rs.getString("unit");
                jUnitComboBox.addItem(unit);
            }
            
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to fetch units.");
        }
    }
}

    public void windowClosing(WindowEvent e) {
                // TODO Auto-generated method stub
            	FreeSensor();
            }
    
    private void FreeSensor()
	{
		mbStop = true;
		try {		//wait for thread stopping
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (0 != mhDB)
		{
			FingerprintSensorEx.DBFree(mhDB);
			mhDB = 0;
		}
		if (0 != mhDevice)
		{
			FingerprintSensorEx.CloseDevice(mhDevice);
			mhDevice = 0;
		}
		FingerprintSensorEx.Terminate();
	}
	
   

    
	public static void writeBitmap(byte[] imageBuf, int nWidth, int nHeight,
			String path) throws IOException {
		java.io.FileOutputStream fos = new java.io.FileOutputStream(path);
		java.io.DataOutputStream dos = new java.io.DataOutputStream(fos);

		int w = (((nWidth+3)/4)*4);
		int bfType = 0x424d; 
		int bfSize = 54 + 1024 + w * nHeight;
		int bfReserved1 = 0;
		int bfReserved2 = 0;
		int bfOffBits = 54 + 1024;

		dos.writeShort(bfType); 
		dos.write(changeByte(bfSize), 0, 4); 
		dos.write(changeByte(bfReserved1), 0, 2);
		dos.write(changeByte(bfReserved2), 0, 2);
		dos.write(changeByte(bfOffBits), 0, 4);

		int biSize = 40;
		int biWidth = nWidth;
		int biHeight = nHeight;
		int biPlanes = 1; 
		int biBitcount = 8;
		int biCompression = 0;
		int biSizeImage = w * nHeight;
		int biXPelsPerMeter = 0;
		int biYPelsPerMeter = 0;
		int biClrUsed = 0;
		int biClrImportant = 0;

		dos.write(changeByte(biSize), 0, 4);
		dos.write(changeByte(biWidth), 0, 4);
		dos.write(changeByte(biHeight), 0, 4);
		dos.write(changeByte(biPlanes), 0, 2);
		dos.write(changeByte(biBitcount), 0, 2);
		dos.write(changeByte(biCompression), 0, 4);
		dos.write(changeByte(biSizeImage), 0, 4);
		dos.write(changeByte(biXPelsPerMeter), 0, 4);
		dos.write(changeByte(biYPelsPerMeter), 0, 4);
		dos.write(changeByte(biClrUsed), 0, 4);
		dos.write(changeByte(biClrImportant), 0, 4);

		for (int i = 0; i < 256; i++) {
			dos.writeByte(i);
			dos.writeByte(i);
			dos.writeByte(i);
			dos.writeByte(0);
		}

		byte[] filter = null;
		if (w > nWidth)
		{
			filter = new byte[w-nWidth];
		}
		
		for(int i=0;i<nHeight;i++)
		{
			dos.write(imageBuf, (nHeight-1-i)*nWidth, nWidth);
			if (w > nWidth)
				dos.write(filter, 0, w-nWidth);
		}
		dos.flush();
		dos.close();
		fos.close();
	}

	public static byte[] changeByte(int data) {
		return intToByteArray(data);
	}
	
	public static byte[] intToByteArray (final int number) {
		byte[] abyte = new byte[4];  
	    
	    abyte[0] = (byte) (0xff & number);  
	    
	    abyte[1] = (byte) ((0xff00 & number) >> 8);  
	    abyte[2] = (byte) ((0xff0000 & number) >> 16);  
	    abyte[3] = (byte) ((0xff000000 & number) >> 24);  
	    return abyte; 
	}	 
		 
		public static int byteArrayToInt(byte[] bytes) {
			int number = bytes[0] & 0xFF;  
		    
		    number |= ((bytes[1] << 8) & 0xFF00);  
		    number |= ((bytes[2] << 16) & 0xFF0000);  
		    number |= ((bytes[3] << 24) & 0xFF000000);  
		    return number;  
		 }
                
private class WorkThread extends Thread {
    
    
    @Override
    public void run() {
        super.run();
        int ret = 0;
        while (!mbStop) {
            templateLen[0] = 2048;
            if (0 == (ret = FingerprintSensorEx.AcquireFingerprint(mhDevice, imgbuf, template, templateLen))) {
                if (nFakeFunOn == 1) {
                    byte[] paramValue = new byte[4];
                    int[] size = new int[1];
                    size[0] = 4;
                    int nFakeStatus = 0;
                    // GetFakeStatus
                    ret = FingerprintSensorEx.GetParameters(mhDevice, 2004, paramValue, size);
                    nFakeStatus = byteArrayToInt(paramValue);
                    System.out.println("ret = " + ret + ",nFakeStatus=" + nFakeStatus);
                    if (0 == ret && (byte) (nFakeStatus & 31) != 31) {
                        textArea.setText("Is a fake-finger?");
                        return;
                    }
                }
                try {
                    OnCaptureOK(imgbuf);
                } catch (WriterException ex) {
                    Logger.getLogger(Student_EnrollmentTab.class.getName()).log(Level.SEVERE, null, ex);
                }
                

                String strBase64 = FingerprintSensorEx.BlobToBase64(template, templateLen[0]);
                System.out.println("strBase64=" + strBase64);
                
                
            }
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
    private void runOnUiThread(Runnable runnable) {
        // TODO Auto-generated method stub
    }
}

 
private void OnCaptureOK(byte[] imgbuf) throws WriterException {
    try {
        // Save the captured fingerprint image with a unique filename based on individual's ID or name
        String fingerprintImagePath = FINGERPRINT_IMAGE_PATH + "fingerprint_" + teacherName + "_" + System.currentTimeMillis() + ".bmp";
        writeBitmap(imgbuf, fpWidth, fpHeight, fingerprintImagePath);

        // Get lecturer information
        getvalue();

        // Extract and save the fingerprint template with additional information (e.g., ID, name) in the database
        extractAndSaveFingerprintTemplate(teacherName, imgbuf);

        // Display the captured fingerprint image on the GUI if needed
        lblfinger.setIcon(new ImageIcon(ImageIO.read(new File(fingerprintImagePath))));
    } catch (IOException e) {
        e.printStackTrace();
    }
}


private void extractAndSaveFingerprintTemplate(String teacherName, byte[] imgbuf) throws WriterException {
    // Extract the fingerprint template from the captured image
    byte[] template = new byte[2048];
    int[] sizeCapturedTemplate = new int[1];
    sizeCapturedTemplate[0] = 2048;

    // Extract fingerprint template from the captured image
    int ret = FingerprintSensorEx.ExtractFromImage(mhDB, byteArrayToFilePath(imgbuf), 500, template, sizeCapturedTemplate);
    if (ret == 0) {
       if (teacherName == null || teacherName.isEmpty()) {
        textArea.setText("Error: Lecturer name is required.");
        return;
    }

    // Save the fingerprint template along with additional information to the database
    saveFingerprintTemplateToDatabase( teacherName, template);
    } else {
        textArea.setText("ExtractFromImage fail, ret=" + ret);
    }
}

// Convert byte array to a temporary image file and return the file path
private String byteArrayToFilePath(byte[] imgbuf) {
    try {
        // Create a temporary BMP file
        String filePath = "temp_fingerprint.bmp";
        writeBitmap(imgbuf, fpWidth, fpHeight, filePath);

        return filePath;
    } catch (IOException e) {
        e.printStackTrace();
        return null;
    }
}



private void saveFingerprintTemplateToDatabase(String teacherName, byte[] template) throws WriterException {
    try {
        getvalue();
         // Check if 'name' is not null or empty
        if (teacherName == null || teacherName.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide a valid lecturer name.");
            return;
        }
        
        
        // Save the fingerprint template along with additional information to the database
        String sql = "INSERT INTO `tbl_teacher` (`teacher_id`, `teacher_name`, `teacher_faculty`, `teacher_unit`, `added_on`, `fingerprint`) VALUES (?,?,?,?,?,?)";
        pst = conn.prepareStatement(sql);

                pst.setString(1, id);
                pst.setString(2, teacherName);
                pst.setString(3, teacherFaculty);
                pst.setString(4, selectedUnit);
                pst.setString(5, d);
                pst.setBytes(6, template);

        // Execute the SQL query
        int result = pst.executeUpdate();
        if (result > 0) {
            textArea.setText("Fingerprint template saved successfully for " + teacherName);
        } else {
            textArea.setText("Failed to save fingerprint template for " + teacherName);
        }
         // Additional handling code as needed
        clearingFields();
        JOptionPane.showMessageDialog(rootPane, "Lecturer Data Added Successfully");
        getID();
        clearingTable();
        getTeacherData();
    } catch (SQLException e) {
        textArea.setText("Error saving fingerprint template: " + e.getMessage());
        e.printStackTrace();
    }
}

 
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Lecturer_Enrollment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_btn;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnopen;
    private javax.swing.JButton clear_btn;
    private javax.swing.JButton dashboard_btn;
    private javax.swing.JComboBox<String> jComboSemester;
    private javax.swing.JComboBox<String> jComboYear;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JComboBox<String> jFaculty;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox<String> jUnitComboBox;
    private javax.swing.JButton lblfinger;
    private javax.swing.JButton remove_btn;
    private javax.swing.JLabel t_id;
    private javax.swing.JTextField tch_name;
    private javax.swing.JTextArea textArea;
    private javax.swing.JButton update_btn;
    private javax.swing.JButton viewall_btn;
    // End of variables declaration//GEN-END:variables

    
}
