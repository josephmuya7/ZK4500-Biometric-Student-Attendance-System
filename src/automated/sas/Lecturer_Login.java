
package automated.sas;

/**
 *
 * @author Smoker
 */


import com.zkteco.biometric.FingerprintSensorErrorCode;
import com.zkteco.biometric.FingerprintSensorEx;
import java.awt.Color;
import java.sql.*;
import java.awt.event.WindowEvent;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Lecturer_Login extends javax.swing.JFrame {

    /**
     * Creates new form Lecturer_Login
     */
    
    Connection conn = null;
    PreparedStatement pst = null;
    ResultSet rs =null;
    String sql;
    //the width of fingerprint image
	int fpWidth = 0;
	//the height of fingerprint image
	int fpHeight = 0;
	//for verify test
	private byte[] lastRegTemp = new byte[2048];
	//the length of lastRegTemp
	private int cbRegTemp = 0;
	//pre-register template
	private byte[][] regtemparray = new byte[3][2048];
	//Register
	
	private boolean bIdentify = true;
	//finger id
	private int iFid = 1;
	
	private int nFakeFunOn = 1;
	//must be 3
	static final int enroll_cnt = 3;
	
	
	private byte[] imgbuf = null;
	private byte[] template = new byte[2048];
	private int[] templateLen = new int[1];
	private byte[] fingerprint = new byte[2048];
	
	private boolean mbStop = true;
	private long mhDevice = 0;
	private long mhDB = 0;
    
           private WorkThread workThread;
           private boolean isFingerPlaced = false; // Flag to track if a finger is placed
           private static final String FINGERPRINT_IMAGE_PATH = "C:\\lecturer\\fingerprint_images\\";
   
            private List<byte[]> enrolledTemplates = new ArrayList<>();
    /**
     * Color Class reference
     */
    Color color;
    public Lecturer_Login() {
        initComponents();
        conn=DBConnect.connect();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        login_btn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        logout_btn = new javax.swing.JButton();
        lblfinger = new javax.swing.JButton();
        tch_name = new javax.swing.JTextField();
        btnopen = new javax.swing.JButton();
        btn_close = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Welcome Lecturer", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 255, 204))); // NOI18N

        login_btn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        login_btn.setText("Login");
        login_btn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        login_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                login_btnActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("TeacherName");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/login.gif"))); // NOI18N
        jLabel3.setText("jLabel3");

        logout_btn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        logout_btn.setText("Logout");
        logout_btn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        logout_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logout_btnActionPerformed(evt);
            }
        });

        tch_name.setEditable(false);

        btnopen.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnopen.setText("Open");
        btnopen.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        btnopen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnopenActionPerformed(evt);
            }
        });

        btn_close.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_close.setText("close");
        btn_close.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        btn_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_closeActionPerformed(evt);
            }
        });

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane2.setViewportView(textArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                            .addComponent(lblfinger, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btn_close, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnopen, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(47, 47, 47)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tch_name, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(login_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(logout_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE))
                                .addGap(117, 117, 117))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblfinger, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnopen)
                            .addComponent(jLabel2)
                            .addComponent(tch_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btn_close)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(login_btn)
                        .addGap(18, 18, 18)
                        .addComponent(logout_btn))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void login_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_login_btnActionPerformed
        // TODO add your handling code here:
        
        
         try {

            String sql = "select * from tbl_teacher where teacher_name = ?";
            pst=conn.prepareStatement(sql); 
            
            pst.setString(1, tch_name.getText());

            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                JOptionPane.showMessageDialog(this, "Welcome");
                
                Lec_Dashboard dashboard = new Lec_Dashboard();
                dashboard.setVisible(true);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, "Invalid Username or Password or User doesn't exist", "Invalid", JOptionPane.WARNING_MESSAGE);
            }

        } catch (Exception ex) {
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_login_btnActionPerformed

    private void logout_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logout_btnActionPerformed
        // TODO add your handling code here:
        try {
            int response = JOptionPane.showConfirmDialog(null, "You have clicked Logout. \n Do you want to close the window?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (response == JOptionPane.YES_OPTION) {

                 
                HomePage lf = new HomePage();
                lf.show();
                this.dispose();
            } else if (response == JOptionPane.NO_OPTION) {
            } else if (response == JOptionPane.CLOSED_OPTION) {
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, ex.toString());
        }
    }//GEN-LAST:event_logout_btnActionPerformed

    private void btnopenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnopenActionPerformed
        // TODO Auto-generated method stub
        if (0 != mhDevice)
        {
            //already inited
            textArea.setText("Please close device first!");
            return;
        }
        int ret = FingerprintSensorErrorCode.ZKFP_ERR_OK;
        //Initialize
        cbRegTemp = 0;

        // Set the bIdentify flag to true for identification
        bIdentify = false;
        iFid = 1;

        if (FingerprintSensorErrorCode.ZKFP_ERR_OK != FingerprintSensorEx.Init())
        {
            textArea.setText("Init failed!");
            return;
        }
        ret = FingerprintSensorEx.GetDeviceCount();
        if (ret < 0)
        {
            textArea.setText("No devices connected!");
            FreeSensor();
            return;
        }
        if (0 == (mhDevice = FingerprintSensorEx.OpenDevice(0)))
        {
            textArea.setText("Open device fail, ret = " + ret + "!");
            FreeSensor();
            return;
        }
        if (0 == (mhDB = FingerprintSensorEx.DBInit()))
        {
            textArea.setText("Init DB fail, ret = " + ret + "!");
            FreeSensor();
            return;
        }

        //set fakefun off

        //FingerprintSensorEx.SetParameter(mhDevice, 2002, changeByte(nFakeFunOn), 4);

        byte[] paramValue = new byte[4];
        int[] size = new int[1];
        //GetFakeOn
        //size[0] = 4;
        //FingerprintSensorEx.GetParameters(mhDevice, 2002, paramValue, size);
        //nFakeFunOn = byteArrayToInt(paramValue);

        size[0] = 4;
        FingerprintSensorEx.GetParameters(mhDevice, 1, paramValue, size);
        fpWidth = byteArrayToInt(paramValue);
        size[0] = 4;
        FingerprintSensorEx.GetParameters(mhDevice, 2, paramValue, size);
        fpHeight = byteArrayToInt(paramValue);
        //width = fingerprintSensor.getImageWidth();
        //height = fingerprintSensor.getImageHeight();
        imgbuf = new byte[fpWidth*fpHeight];
        lblfinger.resize(fpWidth, fpHeight);
        mbStop = false;
        workThread = new WorkThread();
        workThread.start();// 绾跨▼鍚姩
        JOptionPane.showMessageDialog(null, "Biometric Device Opened Successfully!");


        // Load all enrolled templates
        enrolledTemplates = loadEnrolledTemplates();
    }//GEN-LAST:event_btnopenActionPerformed

    private void btn_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_closeActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        FreeSensor();
        isFingerPlaced = false; // Reset the flag when closing the sensor
        JOptionPane.showMessageDialog(null, "Biometric Device closed Successfully!");

    }//GEN-LAST:event_btn_closeActionPerformed

    public static void writeBitmap(byte[] imageBuf, int nWidth, int nHeight,
			String path) throws IOException {
		java.io.FileOutputStream fos = new java.io.FileOutputStream(path);
		java.io.DataOutputStream dos = new java.io.DataOutputStream(fos);

		int w = (((nWidth+3)/4)*4);
		int bfType = 0x424d; 
		int bfSize = 54 + 1024 + w * nHeight;
		int bfReserved1 = 0;
		int bfReserved2 = 0;
		int bfOffBits = 54 + 1024;

		dos.writeShort(bfType); 
		dos.write(changeByte(bfSize), 0, 4); 
		dos.write(changeByte(bfReserved1), 0, 2);
		dos.write(changeByte(bfReserved2), 0, 2);
		dos.write(changeByte(bfOffBits), 0, 4);

		int biSize = 40;
		int biWidth = nWidth;
		int biHeight = nHeight;
		int biPlanes = 1; 
		int biBitcount = 8;
		int biCompression = 0;
		int biSizeImage = w * nHeight;
		int biXPelsPerMeter = 0;
		int biYPelsPerMeter = 0;
		int biClrUsed = 0;
		int biClrImportant = 0;

		dos.write(changeByte(biSize), 0, 4);
		dos.write(changeByte(biWidth), 0, 4);
		dos.write(changeByte(biHeight), 0, 4);
		dos.write(changeByte(biPlanes), 0, 2);
		dos.write(changeByte(biBitcount), 0, 2);
		dos.write(changeByte(biCompression), 0, 4);
		dos.write(changeByte(biSizeImage), 0, 4);
		dos.write(changeByte(biXPelsPerMeter), 0, 4);
		dos.write(changeByte(biYPelsPerMeter), 0, 4);
		dos.write(changeByte(biClrUsed), 0, 4);
		dos.write(changeByte(biClrImportant), 0, 4);

		for (int i = 0; i < 256; i++) {
			dos.writeByte(i);
			dos.writeByte(i);
			dos.writeByte(i);
			dos.writeByte(0);
		}

		byte[] filter = null;
		if (w > nWidth)
		{
			filter = new byte[w-nWidth];
		}
		
		for(int i=0;i<nHeight;i++)
		{
			dos.write(imageBuf, (nHeight-1-i)*nWidth, nWidth);
			if (w > nWidth)
				dos.write(filter, 0, w-nWidth);
		}
		dos.flush();
		dos.close();
		fos.close();
	}

	public static byte[] changeByte(int data) {
		return intToByteArray(data);
	}
	
	public static byte[] intToByteArray (final int number) {
		byte[] abyte = new byte[4];  
	    
	    abyte[0] = (byte) (0xff & number);  
	    
	    abyte[1] = (byte) ((0xff00 & number) >> 8);  
	    abyte[2] = (byte) ((0xff0000 & number) >> 16);  
	    abyte[3] = (byte) ((0xff000000 & number) >> 24);  
	    return abyte; 
	}	 
		 
		public static int byteArrayToInt(byte[] bytes) {
			int number = bytes[0] & 0xFF;  
		    
		    number |= ((bytes[1] << 8) & 0xFF00);  
		    number |= ((bytes[2] << 16) & 0xFF0000);  
		    number |= ((bytes[3] << 24) & 0xFF000000);  
		    return number;  
		 }
                
    public void windowClosing(WindowEvent e) {
                // TODO Auto-generated method stub
            	FreeSensor();
            }
    
    private void FreeSensor()
	{
		mbStop = true;
		try {		//wait for thread stopping
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (0 != mhDB)
		{
			FingerprintSensorEx.DBFree(mhDB);
			mhDB = 0;
		}
		if (0 != mhDevice)
		{
			FingerprintSensorEx.CloseDevice(mhDevice);
			mhDevice = 0;
		}
		FingerprintSensorEx.Terminate();
	}
  // Modify your WorkThread to include verifying
private class WorkThread extends Thread {
    
   

    @Override
    public void run() {
        int ret = 0;
        while (!mbStop) {
            templateLen[0] = 2048;
            if (0 == (ret = FingerprintSensorEx.AcquireFingerprint(mhDevice, imgbuf, template, templateLen))) {
                
                
                OnCaptureOK(imgbuf);
                
            }
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

     private void runOnUiThread(Runnable runnable) {
        // TODO Auto-generated method stub
    }
}


private void OnCaptureOK(byte[] imgbuf) {
    // Verify the captured image against the last enrolled template
    verifyCapturedImage(imgbuf);
}


private List<byte[]> loadEnrolledTemplates() {
    List<byte[]> enrolledTemplates = new ArrayList<>();

    try {
        String sql = "SELECT fingerprint FROM tbl_teacher";
        PreparedStatement pst = conn.prepareStatement(sql);

        ResultSet rs = pst.executeQuery();

        while (rs.next()) {
            // Retrieve each enrolled fingerprint template from the database
            byte[] template = rs.getBytes("fingerprint");
            System.out.println("Retrieved template length: " + (template != null ? template.length : 0));
            enrolledTemplates.add(template);
        }

    } catch (SQLException e) {
        System.out.println("Error retrieving enrolled fingerprint templates: " + e.getMessage());
    }

    return enrolledTemplates;
}

private void verifyCapturedImage(byte[] imgbuf) {
    if (0 == mhDB) {
        textArea.setText("Please open device first!");
        return;
    }

    // Save the captured image to a temporary file
    String imagePath = FINGERPRINT_IMAGE_PATH + "captured_fingerprint.bmp";
    try {
        writeBitmap(imgbuf, fpWidth, fpHeight, imagePath);
    } catch (IOException ex) {
        Logger.getLogger(Student_VerificationTab.class.getName()).log(Level.SEVERE, null, ex);
    }

    // Extract template from the saved image file
    byte[] capturedTemplate = new byte[2048];
    int[] sizeCapturedTemplate = new int[1];
    sizeCapturedTemplate[0] = 2048;
    int ret = FingerprintSensorEx.ExtractFromImage(mhDB, imagePath, 500, capturedTemplate, sizeCapturedTemplate);

    if (ret == 0) {
        boolean verificationSuccessful = false;

        // Iterate through all enrolled templates
        for (byte[] enrolledTemplate : enrolledTemplates) {
            // Verify the captured template against each enrolled template
            ret = FingerprintSensorEx.DBMatch(mhDB, enrolledTemplate, capturedTemplate);
            if (ret > 0) {
                textArea.setText("Verification successful, score=" + ret);
                // Display student information only when verification is successful
                displayLecturerInformationByTemplate(enrolledTemplate);
                verificationSuccessful = true;
                break; // Break the loop on the first successful verification
            }
        }

        if (!verificationSuccessful) {
            textArea.setText("Verification failure");
            clearLecturerInformation();
        }

    } else {
        textArea.setText("ExtractFromImage fail, ret=" + ret);
    }
}



 private byte[] retrieveEnrolledTemplateFromDatabase() {
    try {
        String sql = "SELECT fingerprint FROM tbl_teacher ORDER BY teacher_id DESC LIMIT 1";
        PreparedStatement pst = conn.prepareStatement(sql);

        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            // Retrieve the last enrolled fingerprint template from the database
            byte[] template = rs.getBytes("fingerprint");
            System.out.println("Retrieved template length: " + (template != null ? template.length : 0));
            return template;
        } else {
            System.out.println("No enrolled lecturer fingerprint templates found in the database.");
            return null;
        }
    } catch (SQLException e) {
        System.out.println("Error retrieving enrolled lecturer fingerprint template: " + e.getMessage());
        return null;
    }
}
 
 

    private void displayLecturerInformationByTemplate(byte[] template) {
        
      
    try {
        String sql = "SELECT  teacher_name FROM tbl_teacher WHERE fingerprint = ?";
        PreparedStatement pst = conn.prepareStatement(sql);
        pst.setBytes(1, template);

        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            
                tch_name.setText(rs.getString("teacher_name"));
        
                JOptionPane.showMessageDialog(this, "Welcome");
              
                // Pass the username to the Admin_Dashboard JFrame
                Lec_Dashboard dashboard = new Lec_Dashboard();
                dashboard.setVisible(true);
                this.dispose();
            System.out.println("Lecturer information found for the provided template.");
            
        } else {
            System.out.println("No lecturer information found for the provided template.");
            clearLecturerInformation();
        }
    } catch (SQLException e) {
        System.out.println("Error retrieving lecturer information: " + e.getMessage());
        // Handle the error, e.g., display an error message
    }
}


private void clearLecturerInformation() {
    // Clear displayed student information in JTextFields or JLabels
    tch_name.setText("");
    
    // Add additional fields to clear as needed
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Lecturer_Login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_close;
    private javax.swing.JButton btnopen;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton lblfinger;
    private javax.swing.JButton login_btn;
    private javax.swing.JButton logout_btn;
    private javax.swing.JTextField tch_name;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
